name: Validate PR

on:
  workflow_call:
    inputs:
      build_args:
        required: false
        type: string
        default: ''
      docker_namespace:
        required: false
        type: string
        default: 'syd.ocir.io/coexservices01'
      java_version:
        required: false
        type: string
        default: '17'
    secrets:
      snyk_auth_token:
        required: false
      github_repo_actor:
        required: false
      github_repo_token:
        required: false
      docker_username:
        required: false
      docker_password:
        required: false
      oracle_dev_liquibase_atp_datasource_url:
        required: false
      oracle_dev_liquibase_atp_datasource_username:
        required: false
      oracle_dev_liquibase_atp_datasource_password:
        required: false
      oracle_dev_liquibase_atp_wallet:
        required: false
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  validate-commit-msg:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check PR and commit formats
        uses: gsactions/commit-message-checker@v1
        if: github.event_name != 'workflow_dispatch'
        with:
          pattern: '^[A-Z][A-Z0-9]+-[0-9]+: .*$'
          error: |
            Your commit message and your PR title must follow the format of 'JIRA-123: ' 
            Did you forget to add your jira?
            Did you follow the correct format?

            Please follow this format so Jira can auto detect what is in each release.
            The regex is '^[A-Z][A-Z0-9]+-[0-9]+: .*$'
          checkAllCommitMessages: true
          accessToken: ${{ secrets.GITHUB_TOKEN }} # github access token is only required if checkAllCommitMessages is true

  validate-k8s:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Project Step Calculator
        run: |
          echo "HAS_K8S_DIR=$( [ -d ./k8s ] && echo true || echo false )" >> $GITHUB_ENV
          echo "DOCKER_USERNAME=$( [ ! -z "${{ secrets.docker_username }}" ] && echo ${{ secrets.docker_username }} || echo ${{ secrets.ORACLE_CONTAINER_REGISTRY_DOCKER_USERNAME }} )" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$( [ ! -z "${{ secrets.docker_password }}" ] && echo ${{ secrets.docker_password }} || echo ${{ secrets.ORACLE_CONTAINER_REGISTRY_DOCKER_PASSWORD }} )" >> $GITHUB_ENV
          
          cat $GITHUB_ENV

      - name: Docker Login
        run: |
          docker login ${{ inputs.docker_namespace }} -u ${{ env.DOCKER_USERNAME }} -p "${{ env.DOCKER_PASSWORD }}"

      - name: "check sit k8s helm charts"
        if: env.HAS_K8S_DIR == 'true'
        run: |
          docker run --rm \
            -v "$(pwd):/apps" \
            -w /apps \
            syd.ocir.io/coexservices01/alpine/helm:3.9.0 \
            template -f /apps/k8s/values/values.sit.yaml --set "version=${{ github.run_number }}" /apps/k8s/ --debug

      - name: "check uat k8s helm charts"
        if: env.HAS_K8S_DIR == 'true'
        run: |
          docker run --rm \
            -v "$(pwd):/apps" \
            -w /apps \
            syd.ocir.io/coexservices01/alpine/helm:3.9.0 \
            template -f /apps/k8s/values/values.uat.yaml --set "version=${{ github.run_number }}" /apps/k8s/ --debug

      - name: "check prod k8s helm charts"
        if: env.HAS_K8S_DIR == 'true'
        run: |
          docker run --rm \
            -v "$(pwd):/apps" \
            -w /apps \
            syd.ocir.io/coexservices01/alpine/helm:3.9.0 \
            template -f /apps/k8s/values/values.prod.yaml --set "version=${{ github.run_number }}" /apps/k8s/ --debug

  validate-terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Project Step Calculator
        run: |
          echo "HAS_IAM_DIR=$( [ -d ./iam ] && echo true || echo false )" >> $GITHUB_ENV
          echo "HAS_INFRA_DIR=$( [ -d ./infra ] && echo true || echo false )" >> $GITHUB_ENV

      - name: "Validate iam terraform"
        if: env.HAS_IAM_DIR == 'true'
        run: |
          cd iam
          terraform init -backend=false
          terraform validate
          cd ../..

      - name: "Validate infra terraform"
        if: env.HAS_INFRA_DIR == 'true'
        run: |
          cd infra
          terraform init -backend=false
          terraform validate
          cd ../..

  validate-pr:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Project Step Calculator
      run: |
        echo "SNYK_AUTH_TOKEN=$( [ ! -z "${{ secrets.snyk_auth_token }}" ] && echo ${{ secrets.snyk_auth_token }} || echo ${{ secrets.SNYK_AUTH_TOKEN }} )" >> $GITHUB_ENV
        echo "ORACLE_WALLET_PRESENT=$( [ ! -z "${{ secrets.oracle_dev_liquibase_atp_wallet }}" ] && echo true || echo false )" >> $GITHUB_ENV
        
        cat $GITHUB_ENV

    - name: 'Setup DB Wallet'
      if: env.ORACLE_WALLET_PRESENT == 'true'
      run: |
        echo $ORACLE_WALLET | base64 -d > ~/Wallet_LIQUIBASE.zip
        unzip ~/Wallet_LIQUIBASE.zip -d ~/Wallet_LIQUIBASE
        
        echo "SPRING_DATASOURCE_URL=${{ secrets.oracle_dev_liquibase_atp_datasource_url }}" >> $GITHUB_ENV
        echo "SPRING_DATASOURCE_USERNAME=${{ secrets.oracle_dev_liquibase_atp_datasource_username }}" >> $GITHUB_ENV
        echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.oracle_dev_liquibase_atp_datasource_password }}" >> $GITHUB_ENV
        
        cat $GITHUB_ENV
      env:
        ORACLE_WALLET: ${{ secrets.ORACLE_DEV_LIQUIBASE_ATP_WALLET }}

    - uses: snyk/actions/setup@master
    - name: 'Authenticate Snyk CLI'
      run: snyk auth ${SNYK_AUTH_TOKEN}

    - name: Set up JDK ${{ inputs.java_version }}
      uses: actions/setup-java@v3
      with:
        java-version: '${{ inputs.java_version }}'
        distribution: 'temurin'
        cache: maven

    - name: 'Setup github packages maven settings file'
      uses: whelk-io/maven-settings-xml-action@v21
      with:
        repositories: '[ { "id": "github", "url": "https://maven.pkg.github.com/coexservices/*" } ]'
        servers: '[ { "id": "github", "username": "${GITHUB_ACTOR}", "password": "${GITHUB_TOKEN}" } ]'

    - name: "Build with Maven | version: ${{ github.run_number }}"
      run: |
        mvn versions:set -DnewVersion=${{ github.run_number }}
        mvn --batch-mode clean install ${{ inputs.build_args }}
      env:
        GITHUB_ACTOR: ${{ secrets.CES_GITHUB_PACKAGES_READ_ACTOR }}
        GITHUB_TOKEN: ${{ secrets.CES_GITHUB_PACKAGES_READ_TOKEN }}

    - name: Publish JUnit Test Report
      uses: mikepenz/action-junit-report@v3
      if: always() # always run even if the previous step fails
      with:
        report_paths: '**/target/surefire-reports/TEST-*.xml'
