name: Deploy

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      env:
        type: string
        required: true
      ver:
        required: true
        type: string
      target_argocd_repo:
        required: true
        type: string
      dryrun:
        required: false
        type: boolean
        default: false
      infra_role:
        required: false
        type: string
    secrets:
      service_account_access_token:
        required: false
      docker_username:
        required: false
      docker_password:
        required: false

run-name: Deploy to ${{ github.event.inputs.env }} release ${{ github.event.inputs.ver }}

jobs:

  project-step-calculator:
    runs-on: ubuntu-latest
    outputs:
      HAS_IAM_DIR: ${{ steps.step-calculator.outputs.HAS_IAM_DIR }}
      HAS_INFRA_DIR: ${{ steps.step-calculator.outputs.HAS_INFRA_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ver }}

      - name: Project Step Calculator
        id: step-calculator
        run: |
          echo "HAS_IAM_DIR=$( [ -d ./iam ] && echo true || echo false )" >> $GITHUB_OUTPUT
          echo "HAS_INFRA_DIR=$( [ -d ./infra ] && echo true || echo false )" >> $GITHUB_OUTPUT
          
          cat $GITHUB_OUTPUT

  deploy-terraform-plan-iam:
    needs: [project-step-calculator]
    if: needs.project-step-calculator.outputs.HAS_IAM_DIR == 'true'
    runs-on: [self-hosted, nonprod]
    name: Deploy terraform Plan IAM (${{ inputs.env }} -> ${{ inputs.ver }})
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ver }}

      - name: Environment Variable Setup
        run: |
          case ${{ inputs.env }} in
          sit)
          AWS_ACCOUNT_NAME=development
          AWS_ACCOUNT_NUMBER=398662845025
          ;;
          uat)
          AWS_ACCOUNT_NAME=staging
          AWS_ACCOUNT_NUMBER=330977107317
          ;;
          prod)
          AWS_ACCOUNT_NAME=production
          AWS_ACCOUNT_NUMBER=123963708064
          ;;
          esac
          
          echo "AWS_ACCOUNT_NAME=$AWS_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_NUMBER=$AWS_ACCOUNT_NUMBER" >> $GITHUB_ENV
          echo "REGION=ap-southeast-2" >> $GITHUB_ENV
          
          cat $GITHUB_ENV

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure aws credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/CloudGithubRunnerRole
          role-session-name: GithubSession_${{ inputs.app_name }}
          aws-region: ap-southeast-2

      - name: setup python
        uses: actions/setup-python@v4

      - name: Setup AWS CLI
        run:
          pip3 --no-cache-dir install --upgrade awscli

      - name: Assume IAM role
        id: assume-iam-deployer-role
        run: |
          output="./assume-iam-role-output.json"
          
          aws sts assume-role \
            --role-arn "arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/CloudIamDeployRole" \
            --role-session-name GithubSessionIamDeploy_${{ inputs.app_name }} > $output
          
          AccessKeyId=$(cat $output | jq -r '.Credentials.AccessKeyId')
          SecretAccessKey=$(cat $output | jq -r '.Credentials.SecretAccessKey')
          SessionToken=$(cat $output | jq -r '.Credentials.SessionToken')
          
          echo "::add-mask::$AccessKeyId"
          echo "::add-mask::$SecretAccessKey"
          echo "::add-mask::$SessionToken"

          echo "AWS_ACCESS_KEY_ID=$AccessKeyId" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$SecretAccessKey" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$SessionToken" >> $GITHUB_ENV
          cat $output
          cat $GITHUB_ENV

      - name: Terraform Init iam
        run: |
          aws sts get-caller-identity
          cd iam
          terraform init -input=false \
            -backend-config="bucket=coex-${{ env.AWS_ACCOUNT_NAME }}-terraform-state" \
            -backend-config="key=${{ inputs.app_name }}/${{ env.AWS_ACCOUNT_NAME }}/${{ env.REGION }}/iam/terraform.tfstate" \
            -backend-config="region=${{ env.REGION }}" \
            -backend-config="dynamodb_table=coex-${{ env.AWS_ACCOUNT_NAME }}-terraform-state-lock"

      - name: Terraform Plan iam
        run: |
          cd iam
          terraform plan \
            -no-color \
            -input=false \
            -var-file=./vars/${{ env.AWS_ACCOUNT_NAME }}.tfvars \
            -out=plan-iam.json

      - name: Upload plan iam file
        uses: actions/upload-artifact@v3
        with:
          name: plan-iam.json
          path: iam/plan-iam.json

  deploy-terraform-plan-infra:
    needs: [project-step-calculator, deploy-terraform-apply-iam]
    if: needs.project-step-calculator.outputs.HAS_INFRA_DIR == 'true'
    runs-on: [self-hosted, nonprod]
    name: Deploy terraform Plan INFRA (${{ inputs.env }} -> ${{ inputs.ver }})
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ver }}

      - name: Environment Variable Setup
        run: |
          case ${{ inputs.env }} in
          sit)
          AWS_ACCOUNT_NAME=development
          AWS_ACCOUNT_NUMBER=398662845025
          ;;
          uat)
          AWS_ACCOUNT_NAME=staging
          AWS_ACCOUNT_NUMBER=330977107317
          ;;
          prod)
          AWS_ACCOUNT_NAME=production
          AWS_ACCOUNT_NUMBER=123963708064
          ;;
          esac
          
          echo "AWS_ACCOUNT_NAME=$AWS_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_NUMBER=$AWS_ACCOUNT_NUMBER" >> $GITHUB_ENV
          echo "REGION=ap-southeast-2" >> $GITHUB_ENV
          
          cat $GITHUB_ENV

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure aws credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/CloudGithubRunnerRole
          role-session-name: GithubSession_${{ inputs.app_name }}
          aws-region: ap-southeast-2

      - name: setup python
        uses: actions/setup-python@v4

      - name: Setup AWS CLI
        run:
          pip3 --no-cache-dir install --upgrade awscli

      - name: Assume INFRA role
        id: assume-infra-deployer-role
        run: |
          output="./assume-infra-role-output.json"
          
          aws sts assume-role \
            --role-arn "arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/${{ inputs.infra_role }}" \
            --role-session-name GithubSessionInfraDeploy_${{ inputs.app_name }} > $output
          
          AccessKeyId=$(cat $output | jq -r '.Credentials.AccessKeyId')
          SecretAccessKey=$(cat $output | jq -r '.Credentials.SecretAccessKey')
          SessionToken=$(cat $output | jq -r '.Credentials.SessionToken')
          
          echo "::add-mask::$AccessKeyId"
          echo "::add-mask::$SecretAccessKey"
          echo "::add-mask::$SessionToken"

          echo "AWS_ACCESS_KEY_ID=$AccessKeyId" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$SecretAccessKey" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$SessionToken" >> $GITHUB_ENV
          cat $output
          cat $GITHUB_ENV

      - name: Terraform Init infra
        run: |
          aws sts get-caller-identity
          cd infra
          terraform init -input=false \
            -backend-config="bucket=coex-${{ env.AWS_ACCOUNT_NAME }}-terraform-state" \
            -backend-config="key=${{ inputs.app_name }}/${{ env.AWS_ACCOUNT_NAME }}/${{ env.REGION }}/infra/terraform.tfstate" \
            -backend-config="region=${{ env.REGION }}" \
            -backend-config="dynamodb_table=coex-${{ env.AWS_ACCOUNT_NAME }}-terraform-state-lock"

      - name: Terraform Plan infra
        run: |
          cd infra
          terraform plan \
            -no-color \
            -input=false \
            -var-file=./vars/${{ env.AWS_ACCOUNT_NAME }}.tfvars \
            -out=plan-infra.json

      - name: Upload plan infra file
        uses: actions/upload-artifact@v3
        with:
          name: plan-infra.json
          path: infra/plan-infra.json

  deploy-terraform-apply-iam:
    needs: [ project-step-calculator, deploy-terraform-plan-iam ]
    if: needs.project-step-calculator.outputs.HAS_IAM_DIR == 'true'
    runs-on: [ self-hosted, nonprod ]
    name: Deploy terraform Apply IAM (${{ inputs.env }} -> ${{ inputs.ver }})
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.env }}-terraform-iam
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ver }}

      - name: Download plan iam file
        uses: actions/download-artifact@v3
        with:
          name: plan-iam.json
          path: iam

      - name: Environment Variable Setup
        run: |
          case ${{ inputs.env }} in
          sit)
          AWS_ACCOUNT_NAME=development
          AWS_ACCOUNT_NUMBER=398662845025
          ;;
          uat)
          AWS_ACCOUNT_NAME=staging
          AWS_ACCOUNT_NUMBER=330977107317
          ;;
          prod)
          AWS_ACCOUNT_NAME=production
          AWS_ACCOUNT_NUMBER=123963708064
          ;;
          esac
          
          echo "AWS_ACCOUNT_NAME=$AWS_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_NUMBER=$AWS_ACCOUNT_NUMBER" >> $GITHUB_ENV
          echo "REGION=ap-southeast-2" >> $GITHUB_ENV
          
          cat $GITHUB_ENV

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure aws credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/CloudGithubRunnerRole
          role-session-name: GithubSession_${{ inputs.app_name }}
          aws-region: ap-southeast-2

      - name: setup python
        uses: actions/setup-python@v4

      - name: Setup AWS CLI
        run:
          pip3 --no-cache-dir install --upgrade awscli

      - name: Assume IAM role
        id: assume-iam-deployer-role
        run: |
          output="./assume-role-output.json"
          
          aws sts assume-role \
            --role-arn "arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/CloudIamDeployRole" \
            --role-session-name GithubSessionIamDeploy_${{ inputs.app_name }} > $output
          
          AccessKeyId=$(cat $output | jq -r '.Credentials.AccessKeyId')
          SecretAccessKey=$(cat $output | jq -r '.Credentials.SecretAccessKey')
          SessionToken=$(cat $output | jq -r '.Credentials.SessionToken')
          
          echo "::add-mask::$AccessKeyId"
          echo "::add-mask::$SecretAccessKey"
          echo "::add-mask::$SessionToken"

          echo "AWS_ACCESS_KEY_ID=$AccessKeyId" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$SecretAccessKey" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$SessionToken" >> $GITHUB_ENV
          cat $output
          cat $GITHUB_ENV

      - name: Terraform Init iam
        run: |
          cd iam
          aws sts get-caller-identity
          terraform init -input=false \
            -backend-config="bucket=coex-${{ env.AWS_ACCOUNT_NAME }}-terraform-state" \
            -backend-config="key=${{ inputs.app_name }}/${{ env.AWS_ACCOUNT_NAME }}/${{ env.REGION }}/iam/terraform.tfstate" \
            -backend-config="region=${{ env.REGION }}" \
            -backend-config="dynamodb_table=coex-${{ env.AWS_ACCOUNT_NAME }}-terraform-state-lock"

      - name: Terraform apply
        run: |
          cd iam
          terraform apply \
            -input=false \
            -auto-approve \
            plan-iam.json

  deploy-terraform-apply-infra:
    needs: [ project-step-calculator, deploy-terraform-apply-iam, deploy-terraform-plan-infra]
    if: needs.project-step-calculator.outputs.HAS_INFRA_DIR == 'true'
    runs-on: [ self-hosted, nonprod ]
    name: Deploy terraform Apply INFRA (${{ inputs.env }} -> ${{ inputs.ver }})
    permissions:
      id-token: write
      contents: read
    environment:
      name: ${{ inputs.env }}-terraform-infra
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ver }}

      - name: Download plan infra file
        uses: actions/download-artifact@v3
        with:
          name: plan-infra.json
          path: infra

      - name: Environment Variable Setup
        run: |
          case ${{ inputs.env }} in
          sit)
          AWS_ACCOUNT_NAME=development
          AWS_ACCOUNT_NUMBER=398662845025
          ;;
          uat)
          AWS_ACCOUNT_NAME=staging
          AWS_ACCOUNT_NUMBER=330977107317
          ;;
          prod)
          AWS_ACCOUNT_NAME=production
          AWS_ACCOUNT_NUMBER=123963708064
          ;;
          esac
          
          echo "AWS_ACCOUNT_NAME=$AWS_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_NUMBER=$AWS_ACCOUNT_NUMBER" >> $GITHUB_ENV
          echo "REGION=ap-southeast-2" >> $GITHUB_ENV
          
          cat $GITHUB_ENV

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/CloudGithubRunnerRole
          role-session-name: GithubSession_InfraDeploy_${{ inputs.app_name }}
          aws-region: ap-southeast-2

      - name: setup python
        uses: actions/setup-python@v4

      - name: Setup AWS CLI
        run:
          pip3 --no-cache-dir install --upgrade awscli

      - name: Assume Infra role
        id: assume-infra-deployer-role
        run: |
          output="./assume-infra-role-output.json"
          
          aws sts assume-role \
            --role-arn "arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/${{ inputs.infra_role }}" \
            --role-session-name GithubSessionInfraDeploy_${{ inputs.app_name }} > $output
          
          AccessKeyId=$(cat $output | jq -r '.Credentials.AccessKeyId')
          SecretAccessKey=$(cat $output | jq -r '.Credentials.SecretAccessKey')
          SessionToken=$(cat $output | jq -r '.Credentials.SessionToken')
          
          echo "::add-mask::$AccessKeyId"
          echo "::add-mask::$SecretAccessKey"
          echo "::add-mask::$SessionToken"

          echo "AWS_ACCESS_KEY_ID=$AccessKeyId" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$SecretAccessKey" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$SessionToken" >> $GITHUB_ENV
          cat $output
          cat $GITHUB_ENV

      - name: Terraform Init infra
        run: |
          cd infra
          aws sts get-caller-identity
          terraform init -input=false \
            -backend-config="bucket=coex-${{ env.AWS_ACCOUNT_NAME }}-terraform-state" \
            -backend-config="key=${{ inputs.app_name }}/${{ env.AWS_ACCOUNT_NAME }}/${{ env.REGION }}/infra/terraform.tfstate" \
            -backend-config="region=${{ env.REGION }}" \
            -backend-config="dynamodb_table=coex-${{ env.AWS_ACCOUNT_NAME }}-terraform-state-lock"

      - name: Terraform apply
        run: |
          cd infra
          terraform apply \
            -input=false \
            -auto-approve \
            plan-infra.json

  deploy-app:
    runs-on: ubuntu-latest
    name: Deploy App (${{ inputs.env }} -> ${{ inputs.ver }})
    environment:
      name: ${{ inputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ver }}

      - name: Project Secret Calculator
        id: secret-calculator
        run: |
          echo "GITHUB_ALL_REPO_READ_ACCESS_TOKEN=$( [ ! -z "${{ secrets.CES_ARGOCD_GITHUB_SERVICE_ACCOUNT_TOKEN }}" ] && echo ${{ secrets.CES_ARGOCD_GITHUB_SERVICE_ACCOUNT_TOKEN }} || echo ${{ secrets.service_account_access_token }} )" >> $GITHUB_ENV
          echo "DOCKER_USERNAME=$( [ ! -z "${{ secrets.ORACLE_CONTAINER_REGISTRY_DOCKER_USERNAME }}" ] && echo ${{ secrets.ORACLE_CONTAINER_REGISTRY_DOCKER_USERNAME }} || echo ${{ secrets.docker_username }} )" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$( [ ! -z "${{ secrets.ORACLE_CONTAINER_REGISTRY_DOCKER_PASSWORD }}" ] && echo ${{ secrets.ORACLE_CONTAINER_REGISTRY_DOCKER_PASSWORD }} || echo ${{ secrets.docker_password }} )" >> $GITHUB_ENV
          
          cat $GITHUB_ENV

      - name: Checkout GitOps Repo
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.target_argocd_repo}}
          token: ${{ env.GITHUB_ALL_REPO_READ_ACCESS_TOKEN }}
          fetch-depth: 0
          path: ./argocd-gitops

      - name: 'run helm templates'
        run: |
          rm -rf ./argocd-gitops/${{ inputs.app_name }}/${{ github.event.inputs.env }} || echo "Nothing to delete"
          mkdir -p ./argocd-gitops/${{ inputs.app_name }}/${{ github.event.inputs.env }}

          docker login syd.ocir.io -u ${DOCKER_USERNAME} -p "${DOCKER_PASSWORD}"
          docker run --rm \
            -v "$(pwd):/apps" \
            -w /apps \
            syd.ocir.io/coexservices01/alpine/helm:3.9.0 \
            template -f /apps/k8s/values/values.${{ github.event.inputs.env }}.yaml \
            --set "version=${{ github.event.inputs.ver }}" \
            --set "run=${{ github.run_number }}" \
            /apps/k8s/ \
            --debug \
            --output-dir ./argocd-gitops/${{ inputs.app_name }}/${{ github.event.inputs.env }}

      - name: 'Commit helm changes'
        run: |
          env=${{ github.event.inputs.env }}
          ebv=${{ github.event.inputs.ver }}

          cd ./argocd-gitops
          git config --local user.email "GitHub@Coexservices.com.au"
          git config --local user.name "GitHub"
          git add ${{ inputs.app_name }}/

          git commit -m "Deploy App ${{ github.repository }}: $ebv for $env"
          
          if [ $(git tag -l "${{ github.repository }}-$ebv-$env") ]; then
            echo "--- Cleaning up old tag ---"
            git push --delete origin ${{ github.repository }}-$ebv-$env || echo ""
          fi
          git tag -f -a ${{ github.repository }}-$ebv-$env -m "Tagging commit built in GitHub"

      - name: 'Push helm changes'
        if: inputs.dryrun != true
        run: |
          cd ./argocd-gitops
          git log -2 --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
          git push --tags
          git push
